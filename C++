class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
    ðŸ‘‰ Brute Approach T.C(2N) S.C(1)
    
      int cnt=0;
        int cnt1=0,cnt2=1;

        ListNode* l1=head;
        ListNode* l2=head;
        ListNode* l3=head;
        
        while(l1!=NULL){
            cnt++;
            l1=l1->next;
        }
        
        while(cnt1!=cnt-k){
            cnt1++;
            l3=l3->next;
        }
        
        while(cnt2<k){
            cnt2++;
                l2=l2->next;
        }
     
        swap(l2->val,l3->val);

        return head;
        
    ðŸ‘‰Better Approach T.C O(N) S.C O(1)
    
         ListNode *left_ptr = head, *right_ptr = head;
         int i=0;
        for ( i = 0; i < k-1; i++) {
            right_ptr = right_ptr->next;
        }
        cout<<i<<" ";
        ListNode *end_ptr = right_ptr;
        while (right_ptr->next) {
            left_ptr = left_ptr->next;
            right_ptr = right_ptr->next;
        }
        
        swap(end_ptr->val, left_ptr->val);
        
        return head;
    }
};
